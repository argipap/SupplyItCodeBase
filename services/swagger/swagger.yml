openapi: 3.0.2
info:
  version: 0.0.1
  title: Supplyit Users Service
  description: Swagger spec for documenting the users service
servers:
- url: http://localhost
paths:
  /users/ping:
    get:
      summary: Just a sanity check for users service
      responses:
        '200':
          description: Will return 'pong!'
  /users:
    get:
      summary: Returns all users
      responses:
        '200':
          description: list of user objects
  /users/{user_type}:
    get:
      summary: Returns all retail or wholesale users
      parameters:
      - name: user_type
        in: path
        description: Type of user to fetch
        required: true
        schema:
          $ref: '#/components/schemas/user_type'
      responses:
        '200':
          description: user object
    post:
      summary: Adds a new retail or wholesale user
      parameters:
      - name: user_type
        in: path
        description: Type of user to create
        required: true
        schema:
          $ref: '#/components/schemas/user_type'
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/user-register-wholesale'
                - $ref: '#/components/schemas/user-register-retail'
      security:
      - bearerAuth: []
      responses:
        '201':
          description: User {user_email} added
        '400':
          description: '''Invalid password'' OR ''Sorry. That email already exists.'''
        '401':
          description: You do not have permission to do that.
  /users/user/{id}:
    get:
      summary: Returns a user based on a single user ID
      parameters:
      - name: id
        in: path
        description: ID of user to fetch
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: user object
        '404':
          description: '''User does not exist or password is invalid'' OR ''Identifier
            should be an integer'''
  /auth/{user_type}/register:
    post:
      summary: Register a new wholesale or retail user
      parameters:
      - name: user_type
        in: path
        description: Type of user to create
        required: true
        schema:
          $ref: '#/components/schemas/user_type'
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/user-register-wholesale'
                - $ref: '#/components/schemas/user-register-retail'
      responses:
        '200':
          description: user object
  /auth/login:
    post:
      summary: Logs a user in
      requestBody:
        description: User to log in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-login'
      responses:
        '200':
          description: Successfully logged in
  /auth/logout:
    get:
      summary: Logs a user out
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
  /auth/status:
    get:
      summary: Returns the logged in user's status
      security:
      - bearerAuth: []
      responses:
        '200':
          description: user object
  /users/addresses:
    get:
      summary: Returns all addresses
      responses:
        '200':
          description: address object
  /users/retailers:
    get:
      summary: Returns all retailer users
      responses:
        '200':
          description: retailer object
  /users/suppliers:
    get:
      summary: Returns all supplier users
      responses:
        '200':
          description: supplier object
  /users/companies:
    get:
      summary: Returns all companies
      responses:
        '200':
          description: Company object
  /users/stores:
    get:
      summary: Returns all stores
      responses:
        '200':
          description: Store object

  # products service
  /products/ping:
    get:
      summary: Just a sanity check for products service
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Will return 'pong!'

  /products:
    get:
      summary: Returns all products
      security:
        - bearerAuth: []
      parameters:
        - name: company
          in: query
          description: company which products belongs to
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of product objects

    post:
      summary: Adds a new product
      security:
        - bearerAuth: []
      requestBody:
        description: Product to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product-add'
      responses:
        '200':
          description: Product {product_name} added successfully
  /products/id/{id}:
    get:
      summary: Returns a product based on a single product_id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of product to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: product object
    delete:
      summary: Deletes a product based on a single product_id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product deleted successfully
    put:
      summary: Updates a product's name, code, quantity, image based on a single product_id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of product to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product's fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product-add'
      responses:
        '200':
          description: Product updated successfully
  /products/name/{name}:
    get:
      summary: Returns a product based on a single name
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: name of product to fetch
          required: true
          schema:
            type: string
        - name: company
          in: query
          description: company which product belongs to
          required: false
          schema:
            type: string
      responses:
        '200':
          description: product object
    delete:
      summary: Deletes a product based on a single [name, company] record
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: code of product to delete
          required: true
          schema:
            type: string
        - name: company
          in: query
          description: company which product with the specific code will be removed
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
    put:
      summary: Updates a product's name, code, quantity, image based on a single [name, company] record
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: name of product to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Product's fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product-add'
      responses:
        '200':
          description: Product updated successfully
  /products/code/{code}:
    get:
      summary: Returns a product based on single [code, company] record or a List of products with the specific code if company argument is not set
      security:
        - bearerAuth: []
      parameters:
        - name: code
          in: path
          description: code of product to fetch
          required: true
          schema:
            type: string
        - name: company
          in: query
          description: company which product belongs to
          required: false
          schema:
            type: string
      responses:
        '200':
          description: product object
    delete:
      summary: Deletes a product based on a single [code, company] record
      security:
        - bearerAuth: []
      parameters:
        - name: code
          in: path
          description: code of product to delete
          required: true
          schema:
            type: string
        - name: company
          in: query
          description: company which product with the specific code will be removed
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
    put:
      summary: Updates a product's name, code, quantity, image based on a single [code, company] record
      security:
        - bearerAuth: []
      parameters:
        - name: code
          in: path
          description: code of product to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Product's fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product-add'
      responses:
        '200':
          description: Product updated successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    user-login:
      properties:
        email:
          type: string
        password:
          type: string
    user-register-wholesale:
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        street_name:
          type: string
        street_number:
          type: string
        city:
          type: string
        zip_code:
          type: string
        company_name:
          type: string
        company_type:
          type: string
          enum:
          - other
          - meat_and_poultry
          - coffee_and_drinks
    user-register-retail:
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        street_name:
          type: string
        street_number:
          type: string
        city:
          type: string
        zip_code:
          type: string
        store_name:
          type: string
        store_type:
          type: string
          enum:
          - other
          - cafeBar
          - restaurant
          - quick_service_restaurant
    user_type:
      type: string
      enum:
      - retail
      - wholesale

    product-add:
      properties:
        name:
          type: string
        category:
          type: string
        code:
          type: string
        company:
          type: string
