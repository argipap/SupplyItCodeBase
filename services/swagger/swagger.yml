components:
  schemas:
    user-login:
      properties:
        email: {type: string}
        password: {type: string}
    user-register-retail:
      properties:
        city: {type: string}
        email: {type: string}
        password: {type: string}
        store_name: {type: string}
        store_type:
          enum: [other, cafeBar, restaurant, quick_service_restaurant]
          type: string
        street_name: {type: string}
        street_number: {type: string}
        username: {type: string}
        zip_code: {type: string}
    user-register-wholesale:
      properties:
        city: {type: string}
        company_name: {type: string}
        company_type:
          enum: [other, meat_and_poultry, coffee_and_drinks]
          type: string
        email: {type: string}
        password: {type: string}
        street_name: {type: string}
        street_number: {type: string}
        username: {type: string}
        zip_code: {type: string}
    user_type:
      enum: [retail, wholesale]
      type: string
  securitySchemes:
    bearerAuth: {scheme: bearer, type: http}
info: {description: Swagger spec for documenting the users service, title: Supplyit
    Users Service, version: 0.0.1}
openapi: 3.0.2
paths:
  /auth/login:
    post:
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/user-login'}
        description: User to log in
        required: true
      responses:
        '200': {description: Successfully logged in}
      summary: Logs a user in
  /auth/logout:
    get:
      responses:
        '200': {description: Successfully logged out}
      security:
      - bearerAuth: []
      summary: Logs a user out
  /auth/status:
    get:
      responses:
        '200': {description: user object}
      security:
      - bearerAuth: []
      summary: Returns the logged in user's status
  /auth/{user_type}/register:
    post:
      parameters:
      - description: Type of user to create
        in: path
        name: user_type
        required: true
        schema: {$ref: '#/components/schemas/user_type'}
      requestBody:
        content:
          application/json:
            schema:
              items:
                oneOf:
                - {$ref: '#/components/schemas/user-register-wholesale'}
                - {$ref: '#/components/schemas/user-register-retail'}
              type: array
        description: User to add
        required: true
      responses:
        '200': {description: user object}
      summary: Register a new wholesale or retail user
  /users:
    get:
      responses:
        '200': {description: user object}
      summary: Returns all users
  /users/addresses:
    get:
      responses:
        '200': {description: address object}
      summary: Returns all addresses
  /users/companies:
    get:
      responses:
        '200': {description: Company object}
      summary: Returns all companies
  /users/ping:
    get:
      responses:
        '200': {description: Will return 'pong!'}
      summary: Just a sanity check
  /users/retailers:
    get:
      responses:
        '200': {description: retailer object}
      summary: Returns all retailer users
  /users/stores:
    get:
      responses:
        '200': {description: Store object}
      summary: Returns all stores
  /users/suppliers:
    get:
      responses:
        '200': {description: supplier object}
      summary: Returns all supplier users
  /users/user/{id}:
    get:
      parameters:
      - description: ID of user to fetch
        in: path
        name: id
        required: true
        schema: {format: int64, type: integer}
      responses:
        '200': {description: user object}
        '404': {description: '''User does not exist or password is invalid'' OR ''Identifier
            should be an integer'''}
      summary: Returns a user based on a single user ID
  /users/{user_type}:
    get:
      parameters:
      - description: Type of user to fetch
        in: path
        name: user_type
        required: true
        schema: {$ref: '#/components/schemas/user_type'}
      responses:
        '200': {description: user object}
      summary: Returns all retail or wholesale users
    post:
      parameters:
      - description: Type of user to create
        in: path
        name: user_type
        required: true
        schema: {$ref: '#/components/schemas/user_type'}
      requestBody:
        content:
          application/json:
            schema:
              items:
                oneOf:
                - {$ref: '#/components/schemas/user-register-wholesale'}
                - {$ref: '#/components/schemas/user-register-retail'}
              type: array
        description: User to add
        required: true
      responses:
        '201': {description: 'User {user_email} added'}
        '400': {description: '''Invalid password'' OR ''Sorry. That email already
            exists.'''}
        '401': {description: You do not have permission to do that.}
      security:
      - bearerAuth: []
      summary: Adds a new retail or wholesale user
servers:
- {url: 'http://localhost'}
